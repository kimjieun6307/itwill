# -*- coding: utf-8 -*-
"""
1. 축(axis) : 행축, 열축
2. 행렬곱 연산 : np.dot()
   ex) 회귀방정식 = [a * x] + b
    => x1, x2 -> 기울기 a1, a2
    => model = [x1 * a1 + x2 * a2] +b
    => model = np.dot(x, a) + b

    ex) 신경망에서 행렬곱
    => x * w + b   ( w:가중치, b:편향)
"""
#@@7

import numpy as np

# 1. 축(axis) : 행축, 열축
'''
행 축 : 동일한 열의 모음(axis = 0) -> 열 단위
열 축 : 동일한 행의 모음(axis = 1) -> 행 단위
'''
 
arr2d = np.random.randn(5, 4)
arr2d
'''
array([[ 0.0412419 , -1.05081736, -1.11372182, -0.70599289],
       [ 0.34025561, -0.26088032, -0.04978055, -1.74204501],
       [ 0.89024603, -1.14986819, -0.91842834, -0.13881657],
       [ 0.80144276,  1.34583795,  0.44506755,  1.1114957 ],
       [-0.27747825,  0.01510895,  0.46469858, -1.14638019]])
'''

print('전체 원소 합계 : ', arr2d.sum())
# 전체 원소 합계 :  -3.098814459480385  # scara형 반환

print('행 단위 합계 : ', arr2d.sum(axis=1))
# 행 단위 합계 :  [-2.82929017 -1.71245028 -1.31686707  3.70384396 -0.9440509 ]
# 2차원 -> 1차원 vector형으로 행개수 만큼 반환

print('열 단위 합계 : ', arr2d.sum(axis=0))
# 열 단위 합계 :  [ 1.79570805 -1.10061898 -1.17216458 -2.62173895]


# 2. 행렬곱 연산 : np.dot()
'''
np.dot(x, a) 전제조건 
1) x, a : 행렬구조( x도 행렬, 기울기 a도 행렬 구조여야 함.)
2) 수일치 :  x열 차수 = a행 차수( x :(2,2) -> a : (2,1) )
'''

x = np.array([[2, 3], [2.5, 3]])
x
'''
array([[2. , 3. ],
       [2.5, 3. ]])
'''
x.shape # (2,2)

a = np.array([[0.1], [0.05]]) #(2,1)
a
'''
array([[0.1 ],
       [0.05]])
'''
a.shape # (2,1)

# ex) 회귀방정식 = [a * x] + b
# 1열 == x1, 2열 == x2
b = 0.1
y_pred = np.dot(x, a) + b
y_pred
'''
array([[0.45],
       [0.5 ]])
'''

#[실습] p60 (입력 X 가중치)
#@@1
import numpy as np
x=np.array([[0.1, 0.2], [0.3, 0.4]])
x.shape # (2, 2)
x
'''
array([[0.1, 0.2],
       [0.3, 0.4]])
'''

w = np.array([[1,2,3],[2,3,4]])
w.shape # (2, 3)
w
'''
array([[1, 2, 3],
       [2, 3, 4]])
'''

# 행렬곱
h = np.dot(x, w)
h
'''
array([[0.5, 0.8, 1.1],
       [1.1, 1.8, 2.5]])
'''
h.shape # (2, 3)  ==> h(2,3) = x(2,2)*w(2,3) 














